pipeline {
  options {
    buildDiscarder(logRotator(numToKeepStr: '5'))
  }
  triggers {
      pollSCM 'H/1 * * * *'
  }
  agent {
    kubernetes {
      defaultContainer 'jnlp'
      yaml """
apiVersion: v1
kind: Pod
metadata:
  labels:
    agent: jenkins-agents
spec:
  containers:
  - name: docker
    image: docker:18.09
    command:
    - cat
    tty: true
    volumeMounts:
    - mountPath: /var/run/docker.sock
      name: test-volume
  - name: helm
    image: dtzar/helm-kubectl:2.14.3
    command:
    - cat
    tty: true
  volumes:
  - name: test-volume
    hostPath:
      path: /var/run/docker.sock
"""
    }
  }
  stages {
    // Enhancements: Here we can add a notification stage to notify to Slack or wherever that the build has been started
    stage('Build') {
      steps {
        git branch: "master", url: 'https://github.com/nanab4u/go-build.git'
		// Enhancements: Here we can add static code analysis(SonarGo is one of the example) to ensure code adheres to industry standards
        container('docker') {
          withDockerRegistry(registry: [credentialsId: 'docker_hub_creds']) {
		    // Enhancements: We can also add unit testing while building the docker image and store the results in artifacts.
            sh "docker build -t nanab4u/testimage-app:master-${env.BUILD_ID} ./app/"
            sh "docker push nanab4u/testimage-app:master-${env.BUILD_ID}"
          }
        }
      }
	}
    stage('Update & Validate Helm Charts') {
      steps {
        container('helm') {
          sh "sed -i s/__BUILDTAG__/master-${env.BUILD_ID}/g ./app/gochart/values.yaml"
          sh "sed -i s/__BUILDVERSION__/0.0.${env.BUILD_ID}/g ./app/gochart/Chart.yaml"
          sh 'helm lint ./app/gochart'
        }
      }
    }
	// Enhancements: Helm charts can be pushed to chart museum and we can fetch it from there and deploy it to K8 clusters.
    stage('Deploy') {
      steps {
        container('helm') {
          sh 'helm upgrade goapp ./app/gochart/ --install'
        }
      }
    }
	// Enhancements: Here we can verify the deployment with regression/performance testing,dynamic code analysis and rollback the release if it is required. This stage can be added here
	// Enhancements: Post build and deployment success/failure stage can be added here
  }
}